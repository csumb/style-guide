{"version":3,"file":"static/iframe.8c5e65c4385173a1d222.bundle.js","sources":["webpack:///./src/components/schedule.js"],"sourcesContent":["import React from 'react'\nimport styled from 'react-emotion'\nimport Link from 'gatsby-link'\nimport { Flex, Box } from '@rebass/grid/emotion'\nimport { colors } from 'components/styles/theme'\nimport PageTitle from 'components/page-title'\nimport moment from 'moment'\n\nconst ScheduleList = styled('ul')`\n  list-style-type: none;\n  margin: 0;\n`\n\nconst ScheduleListItemElement = styled('li')`\n  margin-bottom: 0;\n  a {\n    font-weight: bold;\n    display: inline-block;\n    margin-right: 0.5rem;\n  }\n`\n\nconst ScheduleListItem = ({ to, children, subject }) => (\n  <ScheduleListItemElement>\n    <Link to={to}>{subject}</Link>\n    {children}\n  </ScheduleListItemElement>\n)\n\nconst GEList = styled('ul')`\n  list-style-type: none;\n  margin: 0;\n`\n\nconst GEListItemElement = styled('li')`\n  margin-bottom: 0;\n`\n\nconst GEListItem = ({ to, children }) => (\n  <GEListItemElement>\n    <Link to={to}>{children}</Link>\n  </GEListItemElement>\n)\n\nconst CourseList = ({ courses, term }) => {\n  courses.sort((a, b) => {\n    if (a.CATALOG_NBR === b.CATALOG_NBR && a.SECTION > b.SECTION) {\n      return 1\n    }\n    if (a.CATALOG_NBR === b.CATALOG_NBR && a.SECTION < b.SECTION) {\n      return -1\n    }\n    if (a.CATALOG_NBR > b.CATALOG_NBR) {\n      return 1\n    }\n    if (a.SECTION > b.SECTION) {\n      return 1\n    }\n    return -1\n  })\n\n  return (\n    <section>\n      <CourseListItemHeader />\n      {courses.map((course, key) => (\n        <CourseListItem key={key} course={course} term={term} />\n      ))}\n    </section>\n  )\n}\n\nconst CourseListItemRow = styled('div')`\n  margin-bottom: 0.7rem;\n  padding-bottom: 0.7rem;\n  border-bottom: 1px solid ${colors.muted.bright};\n`\n\nconst MeetingList = styled('ul')`\n  list-style-type: none;\n  margin: 0;\n  font-size: 80%;\n`\n\nconst MeetingItem = props => {\n  const weekDays = [\n    {\n      short: 'MON',\n      day: 'Monday',\n    },\n    {\n      short: 'TUES',\n      day: 'Tuesday',\n    },\n    {\n      short: 'WED',\n      day: 'Wednesday',\n    },\n    {\n      short: 'THURS',\n      day: 'Thursday',\n    },\n    {\n      short: 'FRI',\n      day: 'Friday',\n    },\n    {\n      short: 'SAT',\n      day: 'Saturday',\n    },\n    {\n      short: 'SUN',\n      day: 'Sunday',\n    },\n  ]\n\n  let meetingDays = []\n  weekDays.forEach(day => {\n    if (props[day.short] === 'Y') {\n      meetingDays.push(day.day)\n    }\n  })\n\n  const start = moment(props.MEETING_TIME_START)\n  const end = moment(props.MEETING_TIME_END)\n  return (\n    <li>\n      {meetingDays.length && meetingDays.join(', ')} {start.format('h:mma')} to{' '}\n      {end.format('h:mma')}\n      {props.showLocation &&\n        props._building && (\n          <>\n            <br />\n            <Link to={`building/${props._building.code}`}>\n              {props._building.buildingName}\n            </Link>{' '}\n            - Room {props.MEETING_RM}\n          </>\n        )}\n    </li>\n  )\n}\n\nconst CourseListItem = ({ course, term }) => {\n  const link = `/schedule/${term.DESCR.toLowerCase().replace(' ', '')}/course/${\n    course.CRN\n  }`\n\n  return (\n    <CourseListItemRow>\n      <Flex flexWrap=\"wrap\">\n        <Box width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n          <Link to={link}>\n            {course.SUBJECT} {course.CATALOG_NBR}\n          </Link>\n        </Box>\n        <Box width={[1, 1, 3 / 12, 3 / 12]} px={2}>\n          <Link to={link}>{course.TITLE}</Link>\n        </Box>\n        <Box width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n          {parseInt(course.SECTION)}\n        </Box>\n        <Box width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n          {course.CRN}\n        </Box>\n        <Box width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n          {course.UNITS}\n        </Box>\n        <Box width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n          {course.ENRL_TOT}/{course.ENRL_MAX}\n        </Box>\n        <Box width={[1, 1, 3 / 12, 4 / 12]} px={2}>\n          {course._meetingPattern && (\n            <MeetingList>\n              {course._meetingPattern.map((meeting, key) => (\n                <MeetingItem key={key} {...meeting} />\n              ))}\n            </MeetingList>\n          )}\n        </Box>\n      </Flex>\n    </CourseListItemRow>\n  )\n}\n\nconst CourseListItemHeaderFlex = styled(Flex)`\n  background: ${colors.primary.darkest};\n  color: ${colors.white};\n  margin-bottom: 0.5rem;\n`\n\nconst CourseListItemHeaderBox = styled(Box)`\n  padding: 0.5rem;\n`\n\nconst CourseListItemHeader = () => (\n  <CourseListItemHeaderFlex flexWrap=\"wrap\">\n    <CourseListItemHeaderBox width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n      Course\n    </CourseListItemHeaderBox>\n    <CourseListItemHeaderBox width={[1, 1, 3 / 12, 3 / 12]} px={2}>\n      Title\n    </CourseListItemHeaderBox>\n    <CourseListItemHeaderBox width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n      Section\n    </CourseListItemHeaderBox>\n    <CourseListItemHeaderBox width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n      Number\n    </CourseListItemHeaderBox>\n\n    <CourseListItemHeaderBox width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n      Units\n    </CourseListItemHeaderBox>\n    <CourseListItemHeaderBox width={[1, 1, 1 / 12, 1 / 12]} px={2}>\n      Seats\n    </CourseListItemHeaderBox>\n    <CourseListItemHeaderBox width={[1, 1, 3 / 12, 3 / 12]} px={2}>\n      Day &amp; time\n    </CourseListItemHeaderBox>\n  </CourseListItemHeaderFlex>\n)\n\nconst CourseSectionElement = styled('div')`\n  border: 1px solid ${colors.gray.light};\n  padding: 1rem;\n  margin-bottom: 1rem;\n`\n\nconst CourseSectionLegend = styled('h3')`\n  font-size: 1rem;\n`\n\nconst CourseSection = ({ legend, children }) => (\n  <CourseSectionElement>\n    <CourseSectionLegend>{legend}</CourseSectionLegend>\n    {children}\n  </CourseSectionElement>\n)\n\nconst CourseMeetingList = styled('ul')`\n  list-style-type: none;\n  margin-left: 0;\n`\n\nconst EnrollmentList = styled('dl')`\n  dt,\n  dd {\n    display: inline-block;\n    width: 50%;\n    margin-bottom: 0.3rem;\n  }\n`\n\nconst CourseTitle = styled('h2')`\n  margin-top: 0;\n`\n\nconst CourseNumber = styled('pre')`\n  font-size: 2rem;\n`\n\nconst CoursePage = ({ course, term }) => (\n  <>\n    <PageTitle\n      sub={`${course.SUBJECT} ${course.CATALOG_NBR} Section ${\n        course.SECTION\n      }, ${course.UNITS} units`}\n    >\n      {term.DESCR}\n    </PageTitle>\n    <CourseTitle>{course.TITLE}</CourseTitle>\n    <Flex flexWrap=\"wrap\">\n      <Box width={[1, 1, 1 / 2, 1 / 2]} px={2}>\n        <CourseSection legend=\"Days, times, and locations\">\n          <CourseMeetingList>\n            {course._meetingPattern.map((meeting, key) => (\n              <MeetingItem key={key} {...meeting} showLocation />\n            ))}\n          </CourseMeetingList>\n        </CourseSection>\n        <CourseSection legend=\"Enrollment\">\n          <EnrollmentList>\n            <dt>Open seats</dt>\n            <dd>{course.ENRL_MAX - course.ENRL_TOT}</dd>\n            <dt>Total enrolled</dt>\n            <dd>{course.ENRL_TOT}</dd>\n            <dt>Maximum enrollment</dt>\n            <dd>{course.ENRL_MAX}</dd>\n          </EnrollmentList>\n        </CourseSection>\n      </Box>\n      <Box width={[1, 1, 1 / 2, 1 / 2]} px={2}>\n        <p>{course.DESCR}</p>\n        <CourseSection legend=\"How to register\">\n          {course.CONSENT === 'I' && (\n            <p>\n              To register, you need permission from the instructor.\n              <Link to=\"/permission-codes\">\n                Learn more about permission codes.\n              </Link>\n            </p>\n          )}\n          {course.CONSENT === 'D' && (\n            <p>\n              To register, you need permission from the department.\n              <Link to=\"/permission-codes\">\n                Learn more about permission codes.\n              </Link>\n            </p>\n          )}\n          <p>\n            Use this number to{' '}\n            <Link to=\"/registration-process\">\n              register for the course in CMS\n            </Link>\n            .\n          </p>\n\n          <CourseNumber>{course.CRN}</CourseNumber>\n        </CourseSection>\n      </Box>\n    </Flex>\n  </>\n)\n\nexport {\n  ScheduleList,\n  ScheduleListItem,\n  GEList,\n  GEListItem,\n  CourseList,\n  CourseSection,\n  MeetingItem,\n  CoursePage,\n}\n"],"mappings":"AAQA","sourceRoot":""}